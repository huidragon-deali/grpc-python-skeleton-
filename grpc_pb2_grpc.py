# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class GrpcServiceStub(object):
    """서버: 구현할 인터페이스 정의 , 클라이언트: 호출할 인터페이스
    GRPC는 아래의 네가지의 통신방식을 제공한다,
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getOne = channel.unary_unary(
                '/com.dealicious.grpc.GrpcService/getOne',
                request_serializer=grpc__pb2.Request.SerializeToString,
                response_deserializer=grpc__pb2.Response.FromString,
                )
        self.serverStream = channel.unary_stream(
                '/com.dealicious.grpc.GrpcService/serverStream',
                request_serializer=grpc__pb2.Request.SerializeToString,
                response_deserializer=grpc__pb2.Response.FromString,
                )
        self.clientStream = channel.stream_unary(
                '/com.dealicious.grpc.GrpcService/clientStream',
                request_serializer=grpc__pb2.Request.SerializeToString,
                response_deserializer=grpc__pb2.Response.FromString,
                )
        self.biStream = channel.stream_stream(
                '/com.dealicious.grpc.GrpcService/biStream',
                request_serializer=grpc__pb2.Request.SerializeToString,
                response_deserializer=grpc__pb2.Response.FromString,
                )


class GrpcServiceServicer(object):
    """서버: 구현할 인터페이스 정의 , 클라이언트: 호출할 인터페이스
    GRPC는 아래의 네가지의 통신방식을 제공한다,
    """

    def getOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serverStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def biStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getOne': grpc.unary_unary_rpc_method_handler(
                    servicer.getOne,
                    request_deserializer=grpc__pb2.Request.FromString,
                    response_serializer=grpc__pb2.Response.SerializeToString,
            ),
            'serverStream': grpc.unary_stream_rpc_method_handler(
                    servicer.serverStream,
                    request_deserializer=grpc__pb2.Request.FromString,
                    response_serializer=grpc__pb2.Response.SerializeToString,
            ),
            'clientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.clientStream,
                    request_deserializer=grpc__pb2.Request.FromString,
                    response_serializer=grpc__pb2.Response.SerializeToString,
            ),
            'biStream': grpc.stream_stream_rpc_method_handler(
                    servicer.biStream,
                    request_deserializer=grpc__pb2.Request.FromString,
                    response_serializer=grpc__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.dealicious.grpc.GrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GrpcService(object):
    """서버: 구현할 인터페이스 정의 , 클라이언트: 호출할 인터페이스
    GRPC는 아래의 네가지의 통신방식을 제공한다,
    """

    @staticmethod
    def getOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.dealicious.grpc.GrpcService/getOne',
            grpc__pb2.Request.SerializeToString,
            grpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serverStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.dealicious.grpc.GrpcService/serverStream',
            grpc__pb2.Request.SerializeToString,
            grpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/com.dealicious.grpc.GrpcService/clientStream',
            grpc__pb2.Request.SerializeToString,
            grpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def biStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.dealicious.grpc.GrpcService/biStream',
            grpc__pb2.Request.SerializeToString,
            grpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
